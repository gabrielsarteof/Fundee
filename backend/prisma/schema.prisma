// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          String         @id @default(uuid())
  address     String         @unique
  nonce       String?        
  username    String?        @unique  
  avatarUrl   String?        
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  page        Page?          
  nfts        Nft[]          @relation("UserNFTs")
  transactions Transaction[]  @relation("BuyerTransactions")
}

model Page {
  id           String    @id @default(uuid())
  name         String    @unique
  slug         String   @unique
  ownerId      String    @unique
  owner        User      @relation(fields: [ownerId], references: [id])
  tagline      String?
  description  String?   @db.Text
  avatarUrl    String?
  bannerUrl    String?
  status       String    @default("draft")
  category     String?
  tags         String[]  
  viewCount    Int       @default(0)
  salesCount   Int       @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  nfts         Nft[]
}

model Nft {
  id          String   @id @default(uuid())
  name        String
  description String?
  metadataUrl String
  price       Float
  ownerId     String
  owner       User     @relation("UserNFTs", fields: [ownerId], references: [id])
  pageId      String?
  page        Page?          @relation(fields: [pageId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isListed    Boolean @default(false)

  transactions Transaction[]
  blockchainData BlockchainData? 
}

model Transaction {
  id        String   @id @default(uuid())
  nftId     String
  nft       Nft      @relation(fields: [nftId], references: [id])
  buyerId   String
  buyer     User     @relation("BuyerTransactions", fields: [buyerId], references: [id])
  price     Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlockchainData {
  id               String   @id @default(uuid())
  nftId            String   @unique
  nft              Nft      @relation(fields: [nftId], references: [id])
  blockHash        String
  transactionHash  String
  createdAt        DateTime @default(now())
}
