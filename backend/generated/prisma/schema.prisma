// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  address   String   @unique
  nonce     String
  createdAt DateTime @default(now())

  // NFTs que esse usuário possui
  nfts Nft[] @relation("UserNFTs")

  // Transações em que o usuário foi comprador
  transactions Transaction[] @relation("BuyerTransactions")
}

model Nft {
  id          String   @id @default(uuid())
  name        String
  description String?
  metadataUrl String
  price       Float
  ownerId     String
  owner       User     @relation("UserNFTs", fields: [ownerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactions   Transaction[]
  blockchainData BlockchainData? // relação 1:1 (opcional)
}

model Transaction {
  id        String   @id @default(uuid())
  nftId     String
  nft       Nft      @relation(fields: [nftId], references: [id])
  buyerId   String
  buyer     User     @relation("BuyerTransactions", fields: [buyerId], references: [id])
  price     Float
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BlockchainData {
  id              String   @id @default(uuid())
  nftId           String   @unique
  nft             Nft      @relation(fields: [nftId], references: [id])
  blockHash       String
  transactionHash String
  createdAt       DateTime @default(now())
}
